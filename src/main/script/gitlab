#!/usr/bin/env bash

set -eu

print-usage() {
	echo "GitLab api consumer

Usage:

  gitlab clone <pattern>                                clone single project by name pattern

  gitlab group <pattern>                                prints single group found by pattern
  gitlab groups <pattern>                               prints new-line-separated group names

  gitlab project <pattern>                              prints single project found by pattern
  gitlab projects <pattern>                             prints new-line-separated project names found by pattern

  gitlab (group|groups) <pattern> project <pattern>     print single project inside group/groups
  gitlab (group|groups) <pattern> projects <pattern>    print new-line-separated project names inside group/groups

  gitlab group <group pattern> clone (<directory>)      clone all projects inside group
  gitlab groups <group pattern> clone (<directory>)     clone all projects inside groups

  gitlab group <group pattern> clone (<directory>)      clone all projects inside group
  gitlab groups <group pattern> clone (<directory>)     clone all projects inside groups
	
  


  gitlab project <project pattern> clone



  gitlab (-h|-?|-help|--help)
  gitlab (-t|--token) <gitlab access token> (-u|--base-url) <gitlab base-url> list-projects  
  gitlab (-t|--token) <gitlab access token> (-u|--base-url) <gitlab base-url> list-groups  

Options:
  -h -? -help --help            Show this screen.
  -t --token    <access token>  Access token
  -u --base-url <gitlab url>    gitlab url
  -d --dry-run                  do not modify file system, just print actions to stdout

Environment variables:
  GITLAB_API_TOKEN token     Directory containing files needed by this script.
  GITLAB_BASE_URL base-url   Gitlab base url"
}

{{include:bash-lib}}




# fun: make-get-request groups
# env: base_url
#      token
make-get-request() {
	if [ -n "${token:-}" ]; then
		external-tool curl --silent --header "PRIVATE-TOKEN: $token" "$base_url/api/v4/$1"
		return $?
	else
		external-tool curl --silent '$base_url/api/v4/$1'
		return $?
	fi
}

# fun: get-pageable-list <api part> <json path to extract>
# env: base_url
#      token?
#      page_size?
#      max_pages?
#      params?
get-pageable-list() {
	local url=$1
	local jquery=${2:-}
	local page=0
	if [ -n "${params:-}" ]; then
		local query_suffix="&$params"
	else
		local query_suffix=''
	fi
	while true; do
		# check if max_pages is reached
		page=$[page+1]
		if [ "$page" -gt "${max_pages:-999999}" ]; then
			break
		fi

		local output
		output=$(make-get-request "$url?statistics=true&per_page=${page_size:-100}&page=$page$query_suffix") || return $?

		# check if should break (either error or eof)
		if [ '{"message":"401 Unauthorized"}' == "$output" ]; then
			errcho Unauthorized
			return 1
		fi
		if [[ '[]' == "$output" ]]; then
			break;
		fi

		external-tool jq -Mr ".[]$jquery" <<< "$output" || return $?
	done
}


# fun: raw-list <subreq>
# env: base_url
#      token?
list-raw() {
	token="$token" base_url="$base_url" get-pageable-list "$1" ''
}

# env: base_url
#      token?
list-groups() {
	token="$token" base_url="$base_url" get-pageable-list groups .full_path
}

# env: base_url
#      token?
list-projects() {
	token="$token" base_url="$base_url" get-pageable-list projects .path_with_namespace
}




# env: base_url
#      token?
#      substring
#      group?
search-project() {
	echo
}




# fun: ssh-clone <project full path> <git clone args> ...
# txt:
ssh-clone() {
	local full_path=$1
	shift
	if [ "$dry_run" != yes ]; then
		git clone "git@source.isimplelab.com:${full_path}.git" "$@"
	else
		echo git clone "git@source.isimplelab.com:${full_path}.git" "$@"
	fi
}

# fun: http-clone <project full path> <git clone args> ...
# txt:
http-clone() {
	local full_path=$1
	shift
	if [ "$dry_run" != yes ]; then
		git clone "http://source.isimplelab.com/${full_path}.git:.git" "$@"
	else
		echo git clone "http://source.isimplelab.com/${full_path}.git:.git" "$@"
	fi
}

# fun: clone <project full path> <git clone args> ...
# txt:
clone() {
	ssh-clone "$@"
}




# env: token
#      base_url
groups() {	
	
	# check pattern
	if [ "${1:-}" == '-' ]; then
		local params=
		local not_found_message='no groups found (without filter)'
		shift
	elif [ -z "${1:-}" ]; then
		local params=
		local not_found_message='no groups found (without filter)'
	else
		local params="search=$1"
		local not_found_message="no groups found by search term '$1'"
		shift
	fi

	local found_groups
	found_groups=$(params="$params" get-pageable-list groups .full_path) || return $?
	if [ -z "$found_groups" ]; then
		errcho "$not_found_message"
		return 2
	fi

	if [ -z "${1:-}" ]; then
		echo "$found_groups"
	elif [ "${1:-}" == foreach ]; then
		shift
		while read group; do
			group_path="$group" eval "$@"
		done <<< "$found_groups"
	elif [ "${1:-}" == clone -o "${1-}" == ssh-clone -o "${1-}" == http-clone ]; then
		groups="$found_groups" projects - "$@"
		return $?
	elif [ "${1:-}" == project -o "${1:-}" == projects ]; then
		local subcommand="$1"
		shift
		groups="$found_groups" $subcommand "$@"
	else
		errcho "unexpected argument $1"
		return 1
	fi
}

# env: token
#      base_url
group() {
	# check pattern
	if [ "${1:-}" == '-' ]; then
		local params=
		local not_found_message='no groups found (without filter)'
		local ambiguous_message='ambiguous groups (without filter)'
	elif [ -z "${1:-}" ]; then
		local params=
		local not_found_message='no groups found (without filter)'
		local ambiguous_message='ambiguous groups (without filter)'
	else
		local params="search=$1"
		local not_found_message="no groups found by search term '$1'"
		local ambiguous_message="ambiguous groups by search term '$1'"
		shift
	fi




	local found_group
	found_group=$(params="$params" max_pages=2 page_size=2 get-pageable-list groups .full_path) || return $?
	if [ -z "$found_group" ]; then
		errcho "$not_found_message"
		return 2
	fi

	if [ "$(wc --lines <<< $found_group)" -gt 1 ]; then
		errcho "$ambiguous_message:
$found_group
(may be more...)"
		return 3
	fi

	if [ -z "${1:-}" ]; then
		echo "$found_group"
	elif [ "${1:-}" == clone -o "${1-}" == ssh-clone -o "${1-}" == http-clone ]; then
		groups="$found_group" projects - "$@"
		return $?
	elif [ "${1:-}" == project -o "${1:-}" == projects ]; then
		local subcommand="$1"
		shift
		groups="$found_group" $subcommand "$@"
	else
		errcho "unexpected argument $1"
		return 1
	fi
}


# fun: projects ...
# txt: prints to stdout found projects
# env: base_url
#      token?
#      group?
projects() {
	# check pattern
	if [ "${1:-}" == '-' ]; then
		local params=
		local not_found_message='no projects found (without filter)'
		shift
	elif [ -z "${1:-}" ]; then
		local params=
		local not_found_message='no projects found (without filter)'
	else
		local params="search=$1"
		local not_found_message="no projects found by search term '$1'"
		shift
	fi


	# find projects
	local found_projects=
	if [ -n "${groups:-}" ]; then
		while read full_path; do
			found_projects="$found_projects$(params=$params get-pageable-list groups/$full_path/projects .path_with_namespace)" || return $?
		done <<< "$groups"
	else
		found_projects=$(params="$params" get-pageable-list projects .path_with_namespace)
	fi

	# check any found
	if [ -z "$found_projects" ]; then
		errcho "$not_found_message"
		return 2
	fi


	if [ -z "${1:-}" ]; then
		echo "$found_projects"
		return
	elif [ "${1:-}" == foreach ]; then
		shift
		while read project; do
			group_path=$(dirname $project) project_name=$(basename $project) project_path=$project eval "$@"
		done <<< "$found_projects"
	elif [ "${1:-}" == clone -o "${1:-}" == ssh-clone -o "${1:-}" == http-clone ]; then
		local subcommand="$1"
		shift
		if [ -n "${1:-}" ]; then
			local directory_prefix="$1/"
			shift
		else
			local directory_prefix=''
		fi
		if [[ "$(wc --lines <<< $found_projects)" -gt 1 ]]; then
			while read project; do
				"$subcommand" "$project" "$directory_prefix$project" "$@" || return $?
			done <<< "$found_projects"
		else
			while read project; do
				"$subcommand" "$project" "$directory_prefix$(basename $project)" "$@" || return $?
			done <<< "$found_projects"
		fi
	else
		errcho "unexpected argument $1, expected others"
		return 1
	fi
}

# fun: project pattern (clone|ssh-clone|http-clone)
# txt: find single project by name pattern and proceed with it
# env: base_url
#      token?
#      group?
project() {

	
	# check pattern
	if [ "${1:-}" == '-' ]; then
		local params=
		local not_found_message='no projects found (without filter)'
		local ambiguous_projects='ambiguous projects (without filter)'
	elif [ -z "${1:-}" ]; then
		local params=
		local not_found_message='no projects found (without filter)'
		local ambiguous_projects='ambiguous projects (without filter)'
	else
		local params="search=$1"
		local not_found_message="no projects found by search term '$1'"
		local ambiguous_projects="ambiguous projects by search term '$1'"
		shift
	fi

	# find project
	local found_project=
	if [ -n "${groups:-}" ]; then
		while read full_path; do
			found_project="$found_project$(params='$params' max_pages=2 page_size=2 get-pageable-list projects .path_with_namespace)" || return $?
			if [ "$(wc --lines <<< $found_project)" -gt 1 ]; then
				break
			fi
		done <<< "$groups"
	else
		found_project=$(params="$params" max_pages=2 page_size=2 get-pageable-list projects .path_with_namespace)
	fi

	# check something found
	if [ -z "$found_project" ]; then
		errcho "$not_found_message"
		return 2
	fi

	# check only one found
	if [[ "$(wc --lines <<< $found_project)" -gt 1 ]]; then
		errcho "$ambiguous_projects:
$found_project
(may be more...)"
		return 3
	fi

	# 
	if [ -z "${1:-}" ]; then
		echo "$found_project"
	elif [ "${1-}" == link ]; then
		echo "$base_url/$found_project"
	elif [ "${1-}" == clone -o "${1-}" == ssh-clone -o "${1-}" == http-clone ]; then
		local subcommand="$1"
		shift
		"$subcommand" "$found_project" "$@"
		return $?
	else
		errcho "unexpected argument $1, expected others"
		return 1
	fi

}




main() {

	if [ "${1:-}" == -h -o "${1:-}" == -help -o "${1:-}" == --help -o "${1:-}" == -? ]; then
		print-usage
		return
	fi

	test -f ~/.config/gitlab/env.sh && . ~/.config/gitlab/env.sh


	local token="${token:-}"
	if [ -z "${token:+x}" ]; then
		token="${GITLAB_API_TOKEN:-}"
	fi

	local base_url="${base_url:-}"
	if [ -z "${base_url:+x}" ]; then
		base_url="${GITLAB_BASE_URL:-}"
	fi

	local dry_run=no

	# see https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
	# ${parameter:+word} If parameter is null or unset, nothing is substituted, otherwise the expansion of word is substituted.
	while [ -n "${1:+x}" ]; do
		if [ "$1" == -t -o "$1" == --token ]; then
			if [ -z "${2:-}" ]; then
				errcho "expected value for argument $1"
				return 1
			fi
			token="$2"
			shift 2
		elif [ "$1" == -u -o "$1" == --base-url ]; then
			if [ -z "${2:-}" ]; then
				errcho "expected value for argument $1"
				return 1
			fi
			base_url="$2"
			shift 2
		elif [ "$1" == -d -o "$1" == --dry-run ]; then
			dry_run=yes
			shift
		elif [ "$1" == group -o "$1" == groups -o "$1" == project -o "$1" == projects ]; then
			"$@"
			return $?
		elif [ "$1" == clone ]; then
			if [ -z "${2:-}" ]; then
				errcho "expected project search pattern"
				return 1
			fi
			local project_pattern="$2"
			shift 2
			project "$project_pattern" clone "$@"
			return $?
		else
			errcho "Unexpected command line argument $1. Run 'gitlab -h' for help"
			return 1
		fi
	done

	errcho "No command supplied. Run 'gitlab -h' for help"
	return 1
}

main "$@"
exit $?